2023-02-15  Marek Polacek  <polacek@redhat.com>

	PR c++/106675
	* call.cc (joust_maybe_elide_copy): Return false for ck_ambig.

2023-02-10  Marek Polacek  <polacek@redhat.com>

	PR c++/107079
	* call.cc (set_up_extended_ref_temp): Pass var to maybe_constant_init.

2023-02-09  Tobias Burnus  <tobias@codesourcery.com>

	* parser.cc (cp_parser_omp_allocate): Parse align
	clause and check for restrictions.

2023-02-09  Jakub Jelinek  <jakub@redhat.com>

	PR c++/108698
	* mangle.cc (write_expression, write_template_arg): Handle
	EXCESS_PRECISION_EXPR with REAL_CST operand as
	write_template_arg_literal on fold_convert of the REAL_CST
	to EXCESS_PRECISION_EXPR type.

2023-02-06  Patrick Palka  <ppalka@redhat.com>

	PR c++/107461
	* cp-tree.h (call_expr_dependent_name): Declare.
	* pt.cc (iterative_hash_template_arg) <case CALL_EXPR>: Use
	call_expr_dependent_name instead of dependent_name.
	* tree.cc (call_expr_dependent_name): Define.
	(called_fns_equal): Adjust to take two CALL_EXPRs instead of
	CALL_EXPR_FNs thereof.  Use call_expr_dependent_name instead
	of dependent_name.
	(cp_tree_equal) <case CALL_EXPR>: Adjust call to called_fns_equal.

2023-02-03  Marek Polacek  <polacek@redhat.com>

	PR c++/108158
	* constexpr.cc (cxx_eval_array_reference): Don't replace
	new_ctx.object.

2023-02-03  Patrick Palka  <ppalka@redhat.com>

	PR c++/107461
	* semantics.cc (finish_call_expr): Strip ADDR_EXPR from
	the selected callee during overload set pruning.

2023-02-03  Patrick Palka  <ppalka@redhat.com>

	PR c++/96745
	* class.cc (check_methods): Diagnose an unviable OVERLOAD
	set for CLASSTYPE_DESTRUCTOR differently from an ambiguous one.
	Then prune the OVERLOAD to a single function.
	(check_bases_and_members): Handle CLASSTYPE_DESTRUCTOR being
	an OVERLOAD when calling deduce_noexcept_on_destructor.
	Document why it has to be called before check_methods.

2023-02-03  Patrick Palka  <ppalka@redhat.com>

	PR c++/108579
	* class.cc (check_methods): Swap order of constraints_satisfied_p
	and copy/move_fn_p tests.

2023-02-01  Marek Polacek  <polacek@redhat.com>

	PR c++/107755
	* call.cc (build_new_op): Don't call warn_logical_operator when
	processing a template.

2023-02-01  Jakub Jelinek  <jakub@redhat.com>

	PR c++/108607
	* constexpr.cc (cxx_eval_constant_expression): Handle OMP_*
	and OACC_* constructs as non-constant.
	(potential_constant_expression_1): Handle OMP_SCAN and OMP_SCOPE.

2023-02-01  Jason Merrill  <jason@redhat.com>

	* class.cc (note_name_declared_in_class): Change from permerror to
	-Wchanges-meaning pedwarn, forcing -pedantic-errors for most cases.

2023-01-31  Jason Merrill  <jason@redhat.com>

	PR c++/108559
	* cp-gimplify.cc (any_non_eliding_target_exprs): New.
	(cp_genericize_init): Check it.

2023-01-31  Marek Polacek  <polacek@redhat.com>

	PR c++/107593
	PR c++/108597
	* cp-tree.h (instantiation_dependent_expression_p): Don't
	declare here.

2023-01-26  Marek Polacek  <polacek@redhat.com>

	PR c++/105300
	* parser.cc: Remove unnecessary forward declarations.
	(cp_parser_string_literal): New wrapper.
	(cp_parser_string_literal_common): Renamed from
	cp_parser_string_literal.  Add a bool parameter.  Give an error when
	UDLs are not permitted.
	(cp_parser_userdef_string_literal): New wrapper.
	(finish_userdef_string_literal): Renamed from
	cp_parser_userdef_string_literal.
	(cp_parser_primary_expression): Call cp_parser_userdef_string_literal
	instead of cp_parser_string_literal.
	(cp_parser_linkage_specification): Move a variable declaration closer
	to its first use.
	(cp_parser_static_assert): Likewise.
	(cp_parser_operator): Call cp_parser_userdef_string_literal instead of
	cp_parser_string_literal.
	(cp_parser_asm_definition): Move a variable declaration closer to its
	first use.
	(cp_parser_asm_specification_opt): Move variable declarations closer to
	their first use.
	(cp_parser_asm_operand_list): Likewise.
	(cp_parser_asm_clobber_list): Likewise.

2023-01-26  Jakub Jelinek  <jakub@redhat.com>

	PR c++/108503
	* parser.cc (cp_convert_omp_range_for): If cp_finish_decomp has been
	called in !processing_template_decl with processing_template_decl
	temporarily set, clear DECL_HAS_VALUE_EXPR_P on the vars temporarily.
	(cp_finish_omp_range_for): And set it back again here.

2023-01-25  Jakub Jelinek  <jakub@redhat.com>

	PR c++/108525
	* mangle.cc (write_closure_type_name): Don't assume all
	lambda operator() fns are methods.

2023-01-24  Jason Merrill  <jason@redhat.com>

	PR c++/108504
	* parser.cc (cp_lexer_new_main): Pass C_LEX_STRING_NO_JOIN for first
	token, too.

2023-01-24  Jason Merrill  <jason@redhat.com>

	PR c++/108526
	* pt.cc (tsubst_function_decl): Handle static lambda.

2023-01-24  Jakub Jelinek  <jakub@redhat.com>

	PR c++/108474
	* cp-gimplify.cc (cp_fold_r): Revert 2023-01-19 changes.

2023-01-24  Jason Merrill  <jason@redhat.com>

	PR c++/107303
	PR c++/107329
	* cp-gimplify.cc (cp_fold_r) [TARGET_EXPR]: In case of double
	TARGET_EXPR, keep the outer one instead of the inner one.
	(maybe_replace_decl): New.

2023-01-23  Jason Merrill  <jason@redhat.com>

	PR c++/107267
	* cp-gimplify.cc (cp_gimplify_init_expr): Allow unexpected elision
	of trivial types.

2023-01-23  Marek Polacek  <polacek@redhat.com>

	PR c++/107797
	* cvt.cc (ocp_convert): copy_warning when creating a new
	COMPOUND_EXPR.
	* init.cc (build_new_1): Suppress -Wunused-value on
	compiler-generated COMPOUND_EXPRs.

2023-01-23  Jason Merrill  <jason@redhat.com>

	PR c++/108195
	* call.cc (build_user_type_conversion_1): Check whether the
	iterators also find a list ctor.

2023-01-23  Jason Merrill  <jason@redhat.com>

	PR c++/108496
	* decl.cc (grokdeclarator): Check whether DECL_RESULT is already
	set.

2023-01-23  Jason Merrill  <jason@redhat.com>

	PR c++/53288
	DR 1299
	* call.cc (extend_ref_init_temps_1): Handle ptrmem expression.

2023-01-19  Jakub Jelinek  <jakub@redhat.com>

	PR c++/108437
	* cp-tree.h (keep_unused_object_arg): Declare.
	* call.cc (keep_unused_object_arg): No longer static.
	* tree.cc (build_min_non_dep_op_overload): Handle ARRAY_REF
	with overload being static member function.

2023-01-19  Jakub Jelinek  <jakub@redhat.com>

	PR c++/53932
	* cp-gimplify.cc (cp_fold_r): During cp_fully_fold_init replace
	DECL_ANON_UNION_VAR_P VAR_DECLs with their corresponding
	DECL_VALUE_EXPR.

2023-01-16  Jakub Jelinek  <jakub@redhat.com>

	PR c++/105593
	* decl.cc (cp_finish_decl): Check warning_enabled_at
	at the DECL_SOURCE_LOCATION (decl) for OPT_Winit_self instead
	of warn_init_self.

2023-01-14  Jakub Jelinek  <jakub@redhat.com>

	PR c++/108365
	* typeck.cc (cp_build_binary_op): Use may_shorten_divmod for integral
	division or modulo.

2023-01-13  Jakub Jelinek  <jakub@redhat.com>

	PR c++/108285
	* cvt.cc (cp_convert_and_check): For EXCESS_PRECISION_EXPR
	use its operand except that for warning purposes use the original
	EXCESS_PRECISION_EXPR.
	* call.cc (convert_like_internal): Only look through
	EXCESS_PRECISION_EXPR when calling cp_convert, not when calling
	cp_convert_and_check.

2023-01-09  Jakub Jelinek  <jakub@redhat.com>

	PR c++/105838
	PR c++/108047
	PR c++/108266
	* call.cc (maybe_init_list_as_range): Always return NULL_TREE if
	processing_template_decl.

2023-01-05  Patrick Palka  <ppalka@redhat.com>

	PR c++/108275
	* parser.cc (cp_parser_class_head): Use dk_deferred instead of
	dk_no_check when parsing the class name.

2023-01-05  Jakub Jelinek  <jakub@redhat.com>

	PR c++/108286
	* semantics.cc (finish_omp_target_clauses): Ignore clauses other than
	OMP_CLAUSE_MAP.

2023-01-04  Patrick Palka  <ppalka@redhat.com>

	PR c++/108282
	* decl2.cc (mark_single_function): Ignore mark_used failure
	only in a non-SFINAE context rather than in a SFINAE one.

2023-01-04  Jakub Jelinek  <jakub@redhat.com>

	PR c++/108206
	* decl.cc (merge_default_template_args): Return false if either
	new_parm or old_parm are erroneous.


Copyright (C) 2023 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.
