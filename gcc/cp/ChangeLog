2025-01-14  Marek Polacek  <polacek@redhat.com>

	PR c++/118047
	PR c++/118355
	* typeck2.cc (massage_init_elt): Call fold_non_dependent_init
	unless for a CONSTRUCTOR in a template.

2025-01-14  Sandra Loosemore  <sloosemore@baylibre.com>
	    Kwok Cheung Yeung  <kcy@codesourcery.com>
	    Sandra Loosemore  <sandra@codesourcery.com>
	    Marcel Vollweiler  <marcel@codesourcery.com>

	PR middle-end/114596
	PR middle-end/112779
	PR middle-end/113904
	* decl.cc (omp_declare_variant_finalize_one): Update for changes
	to omp-general.h interfaces.
	* parser.cc (cp_finish_omp_declare_variant): Likewise.

2025-01-14  Nathaniel Shead  <nathanieloshead@gmail.com>

	PR c++/117397
	* module.cc (depset::hash::add_deduction_guides): Don't emit
	imported deduction guides.
	(depset::hash::finalize_dependencies): Add check for any
	bindings referring to imported entities.

2025-01-14  Andrew Pinski  <quic_apinski@quicinc.com>

	PR c++/118445
	* constexpr.cc (cxx_eval_constant_expression): Handle VEC_DUPLICATE like
	a "normal" unary operator.
	(potential_constant_expression_1): Likewise.

2025-01-11  Nathaniel Shead  <nathanieloshead@gmail.com>

	PR c++/114630
	* module.cc (trees_in::core_vals) <BLOCK>: Chain a new node if
	DECL_CHAIN already is set.

2025-01-11  Jason Merrill  <jason@redhat.com>

	* module.cc (trees_out::type_node): Write attributes for
	tt_derived_type, not tt_variant_type.
	(trees_in::tree_node): Likewise for reading.

2025-01-11  Jason Merrill  <jason@redhat.com>

	* module.cc (trees_in::decl_value): Merge attributes.

2025-01-10  Paul-Antoine Arras  <parras@baylibre.com>

	* parser.cc (cp_parser_pragma): Replace call to cp_parser_omp_dispatch
	with cp_parser_omp_construct and check context.

2025-01-10  Jakub Jelinek  <jakub@redhat.com>

	PR c++/118387
	* method.cc (genericize_spaceship): For tag == cc_last if
	type is not auto just return error_mark_node instead of failing
	checking assertion.

2025-01-10  Jason Merrill  <jason@redhat.com>

	* module.cc (trees_out::core_bools): Write replaceable_operator.
	(trees_in::core_bools): Read it.

2025-01-10  Marek Polacek  <polacek@redhat.com>

	PR c++/117937
	* pt.cc (tsubst_pack_index): tsubst the pack even when it's not
	PACK_EXPANSION_P.

2025-01-10  Jakub Jelinek  <jakub@redhat.com>

	PR c++/118277
	* cp-tree.h (finish_asm_string_expression): Declare.
	* semantics.cc (finish_asm_string_expression): New function.
	(finish_asm_stmt): Use it.
	* parser.cc (cp_parser_asm_string_expression): Likewise.
	Wrap string into PAREN_EXPR in the ("") case.
	(cp_parser_asm_definition): Don't ICE if finish_asm_stmt
	returns error_mark_node.
	(cp_parser_asm_specification_opt): Revert 2024-06-24 changes.
	* pt.cc (tsubst_stmt): Don't ICE if finish_asm_stmt returns
	error_mark_node.

2025-01-10  Jakub Jelinek  <jakub@redhat.com>

	* module.cc (trees_out::core_vals): Note DECL_VALUE_EXPR even for
	vars outside of functions.
	(trees_in::core_vals): Read in DECL_VALUE_EXPR even for vars outside
	of functions.
	(trees_out::get_merge_kind): Make DECL_DECOMPOSITION_P MK_unique.

2025-01-10  Jason Merrill  <jason@redhat.com>

	* error.cc (cxx_initialize_diagnostics): Improve comment.
	* module.cc (modules): Improve comment.
	(get_originating_module): Add function comment.

2025-01-10  Jason Merrill  <jason@redhat.com>

	* module.cc (trees_out::write_function_def): Write returns* flags.
	(struct post_process_data): Add returns_* flags.
	(trees_in::read_function_def): Set them.
	(module_state::read_cluster): Use them.

2025-01-09  Jason Merrill  <jason@redhat.com>

	* decl.cc (check_redeclaration_exception_specification): Be more
	lenient about ::operator new.

2025-01-09  Jason Merrill  <jason@redhat.com>
	    Torbj√∂rn SVENSSON  <torbjorn.svensson@foss.st.com>

	PR c/116060
	* call.cc (standard_conversion): Preserve type name in ck_identity.
	(maybe_adjust_type_name): New.
	(convert_like_internal): Use it.
	Handle -Wsuggest-attribute=format here.
	(convert_for_arg_passing): Not here.

2025-01-09  Patrick Palka  <ppalka@redhat.com>

	PR c++/118060
	* constraint.cc (tsubst_valid_expression_requirement): Don't
	check convert_to_void during partial substitution.

2025-01-09  Patrick Palka  <ppalka@redhat.com>

	PR c++/117887
	* pt.cc (instantiate_template): Set tf_partial if arguments are
	dependent.

2025-01-09  Patrick Palka  <ppalka@redhat.com>

	PR c++/117925
	* constexpr.cc (potential_constant_expression_1) <case CAST_EXPR>:
	Fix check for class conversion to literal type to properly look
	through the TREE_LIST operand of a CAST_EXPR.

2025-01-09  Patrick Palka  <ppalka@redhat.com>

	PR c++/117925
	* constexpr.cc (cxx_eval_constant_expression) <default>:
	Relax ICE when encountering an unexpected tree code into a
	checking ICE guarded by flag_checking.

2025-01-09  Patrick Palka  <ppalka@redhat.com>

	PR c++/117993
	* search.cc (any_dependent_bases_p): Recurse into bases (of
	dependent type) that are not BINFO_DEPENDENT_BASE_P.  Document
	default argument.

2025-01-09  Patrick Palka  <ppalka@redhat.com>

	PR c++/117792
	* pt.cc (type_dependent_expression_p): Consider the dependence
	of the address of each template argument of a function
	template-id.

2025-01-08  Jakub Jelinek  <jakub@redhat.com>

	PR c++/117825
	* typeck.cc (cp_build_function_call_vec): Don't call
	check_function_arguments if complain doesn't have tf_warning bit set.

2025-01-08  Jason Merrill  <jason@redhat.com>

	* cp-tree.h (build_nop): Add CXX_MEM_STAT_INFO.
	* typeck.cc (build_nop): Add MEM_STAT_DECL.

2025-01-08  Jason Merrill  <jason@redhat.com>

	* call.cc (implicit_conversion): Check that FROM isn't a reference
	if we also got an EXPR argument.
	(convert_like_internal): Check that EXPR isn't a reference.
	(can_convert_arg): convert_from_reference if needed.

2025-01-08  Jason Merrill  <jason@redhat.com>

	* method.cc (is_stub_object): New.
	* cp-tree.h (is_stub_object): Declare.
	* error.cc (dump_expr): Use it.

2025-01-08  Jason Merrill  <jason@redhat.com>

	* call.cc (convert_like_internal): Add missing break.
	* coroutines.cc (cp_coroutine_transform::build_ramp_function): Build
	INIT_EXPR directly.
	* decl.cc (omp_declare_variant_finalize_one): Use build_stub_object.

2025-01-08  Marek Polacek  <polacek@redhat.com>

	PR c++/118169
	* typeck2.cc (split_nonconstant_init): Call finish_expr_stmt instead
	of add_stmt.

2025-01-03  Tobias Burnus  <tburnus@baylibre.com>

	* parser.cc (cp_parser_omp_var_list_no_open,
	cp_parser_omp_var_list): For kind=0 (= OMP_CLAUSE_ERROR),
	store also the expression location in the tree list.
	(cp_parser_oacc_data_clause_deviceptr,
	cp_finish_omp_declare_variant): Use that location instead or
	input_location/the before-parsing location.
	* semantics.cc (finish_omp_threadprivate): Likewise.

2025-01-02  Paul-Antoine Arras  <parras@baylibre.com>

	* parser.cc (cp_parser_omp_dispatch): Handle INDIRECT_REF.


Copyright (C) 2025 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.
