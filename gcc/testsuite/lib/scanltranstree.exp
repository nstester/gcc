#   Copyright (C) 2000-2024 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with GCC; see the file COPYING3.  If not see
# <http://www.gnu.org/licenses/>.

# Various utilities for scanning ltrans tree dump output, used by gcc-dg.exp and
# g++-dg.exp.

load_lib scandump.exp

# The first item in the list is an LTO equivalent of the second item
# in the list; see the documentation of the second item for details.
foreach { name scan type suffix } {
    scan-ltrans-tree-dump scan-dump ltrans-tree t
    scan-ltrans-tree-dump-not scan-dump-not ltrans-tree t
    scan-ltrans-tree-dump-dem scan-dump-dem ltrans-tree t
    scan-ltrans-tree-dump-dem-not scan-dump-dem-not ltrans-tree t
} {
    eval [string map [list @NAME@ $name \
			   @SCAN@ $scan \
			   @TYPE@ $type \
			   @SUFFIX@ $suffix] {
        proc @NAME@ { args } {
	    if { [llength $args] < 2 } {
		error "@NAME@: too few arguments"
		return
	    }
	    if { [llength $args] > 3 } {
		error "@NAME@: too many arguments"
		return
	    }
	    if { [llength $args] >= 3 } {
		@SCAN@ @TYPE@ [lindex $args 0] \
		    "\[0-9\]\[0-9\]\[0-9\]@SUFFIX@.[lindex $args 1]" \
		    ".ltrans0.ltrans" \
		    [lindex $args 2]
	    } else {
		@SCAN@ @TYPE@ [lindex $args 0] \
		    "\[0-9\]\[0-9\]\[0-9\]@SUFFIX@.[lindex $args 1]" \
		    ".ltrans0.ltrans"
	    }
        }
    }]
}

# The first item in the list is an LTO equivalent of the second item
# in the list; see the documentation of the second item for details.
foreach { name scan type suffix } {
    scan-ltrans-tree-dump-times scan-dump-times ltrans-tree t
} {
    eval [string map [list @NAME@ $name \
			   @SCAN@ $scan \
			   @TYPE@ $type \
			   @SUFFIX@ $suffix] {
	proc @NAME@ { args } {
	    if { [llength $args] < 3 } {
		error "@NAME@: too few arguments"
		return
	    }
	    if { [llength $args] > 4 } {
		error "@NAME@: too many arguments"
		return
	    }
	    if { [llength $args] >= 4 } {
		@SCAN@ "@TYPE@" [lindex $args 0] [lindex $args 1] \
		    "\[0-9\]\[0-9\]\[0-9\]@SUFFIX@.[lindex $args 2]" \
		    ".ltrans0.ltrans" [lindex $args 3]
	    } else {
		@SCAN@ "@TYPE@" [lindex $args 0] [lindex $args 1] \
		    "\[0-9\]\[0-9\]\[0-9\]@SUFFIX@.[lindex $args 2]" \
		    ".ltrans0.ltrans"
	    }
	}
    }]
}
