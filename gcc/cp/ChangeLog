2025-01-09  Jason Merrill  <jason@redhat.com>

	* decl.cc (check_redeclaration_exception_specification): Be more
	lenient about ::operator new.

2025-01-09  Jason Merrill  <jason@redhat.com>
	    Torbj√∂rn SVENSSON  <torbjorn.svensson@foss.st.com>

	PR c/116060
	* call.cc (standard_conversion): Preserve type name in ck_identity.
	(maybe_adjust_type_name): New.
	(convert_like_internal): Use it.
	Handle -Wsuggest-attribute=format here.
	(convert_for_arg_passing): Not here.

2025-01-09  Patrick Palka  <ppalka@redhat.com>

	PR c++/118060
	* constraint.cc (tsubst_valid_expression_requirement): Don't
	check convert_to_void during partial substitution.

2025-01-09  Patrick Palka  <ppalka@redhat.com>

	PR c++/117887
	* pt.cc (instantiate_template): Set tf_partial if arguments are
	dependent.

2025-01-09  Patrick Palka  <ppalka@redhat.com>

	PR c++/117925
	* constexpr.cc (potential_constant_expression_1) <case CAST_EXPR>:
	Fix check for class conversion to literal type to properly look
	through the TREE_LIST operand of a CAST_EXPR.

2025-01-09  Patrick Palka  <ppalka@redhat.com>

	PR c++/117925
	* constexpr.cc (cxx_eval_constant_expression) <default>:
	Relax ICE when encountering an unexpected tree code into a
	checking ICE guarded by flag_checking.

2025-01-09  Patrick Palka  <ppalka@redhat.com>

	PR c++/117993
	* search.cc (any_dependent_bases_p): Recurse into bases (of
	dependent type) that are not BINFO_DEPENDENT_BASE_P.  Document
	default argument.

2025-01-09  Patrick Palka  <ppalka@redhat.com>

	PR c++/117792
	* pt.cc (type_dependent_expression_p): Consider the dependence
	of the address of each template argument of a function
	template-id.

2025-01-08  Jakub Jelinek  <jakub@redhat.com>

	PR c++/117825
	* typeck.cc (cp_build_function_call_vec): Don't call
	check_function_arguments if complain doesn't have tf_warning bit set.

2025-01-08  Jason Merrill  <jason@redhat.com>

	* cp-tree.h (build_nop): Add CXX_MEM_STAT_INFO.
	* typeck.cc (build_nop): Add MEM_STAT_DECL.

2025-01-08  Jason Merrill  <jason@redhat.com>

	* call.cc (implicit_conversion): Check that FROM isn't a reference
	if we also got an EXPR argument.
	(convert_like_internal): Check that EXPR isn't a reference.
	(can_convert_arg): convert_from_reference if needed.

2025-01-08  Jason Merrill  <jason@redhat.com>

	* method.cc (is_stub_object): New.
	* cp-tree.h (is_stub_object): Declare.
	* error.cc (dump_expr): Use it.

2025-01-08  Jason Merrill  <jason@redhat.com>

	* call.cc (convert_like_internal): Add missing break.
	* coroutines.cc (cp_coroutine_transform::build_ramp_function): Build
	INIT_EXPR directly.
	* decl.cc (omp_declare_variant_finalize_one): Use build_stub_object.

2025-01-08  Marek Polacek  <polacek@redhat.com>

	PR c++/118169
	* typeck2.cc (split_nonconstant_init): Call finish_expr_stmt instead
	of add_stmt.

2025-01-03  Tobias Burnus  <tburnus@baylibre.com>

	* parser.cc (cp_parser_omp_var_list_no_open,
	cp_parser_omp_var_list): For kind=0 (= OMP_CLAUSE_ERROR),
	store also the expression location in the tree list.
	(cp_parser_oacc_data_clause_deviceptr,
	cp_finish_omp_declare_variant): Use that location instead or
	input_location/the before-parsing location.
	* semantics.cc (finish_omp_threadprivate): Likewise.

2025-01-02  Paul-Antoine Arras  <parras@baylibre.com>

	* parser.cc (cp_parser_omp_dispatch): Handle INDIRECT_REF.


Copyright (C) 2025 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.
